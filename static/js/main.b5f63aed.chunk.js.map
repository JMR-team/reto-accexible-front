{"version":3,"sources":["Components/NavBar/MenuList.js","assets/images/accexible-logo.png","Components/NavBar/NavBar.js","Components/Services/Services.js","Components/ChatTest/assets/logotipo.bbk.svg","Components/ChatTest/assets/logocode4jobs.svg","Components/Header/Header.js","Components/Footer/Footer.js","Pages/Home/Home.js","Pages/Login/Login.js","Pages/Signup/Signup.js","Components/ChatTest/config/ActionProviders.js","Components/ChatTest/config/MessageParser.js","Components/ChatTest/config/validator.js","Components/ChatTest/widgets/StartTestWidget.js","Components/ChatTest/widgets/EndTestWidget.js","Components/ChatTest/ChatTestComponent.js","Components/Questions/QuestionsComponent.js","Components/FormularioEnviar/FormularioEnviarComponent.js","Components/EmailConfirmation/EmailConfirmation.js","Pages/Test/Test.js","Components/CalendarResultModal/CalendarResultModal.js","Pages/PersonalPage/PersonalPage.js","Components/App.js","reportWebVitals.js","index.js"],"names":["MenuList","title","url","showAlways","showOnlyForLogged","Navbar","navigate","useNavigate","useState","localStorage","getItem","userIsLogged","setUserIsLogged","clicked","setClicked","useEffect","handleClick","menuList","filter","map","index","onClick","exact","to","activeClassName","className","src","AccesibleLogo","alt","clear","Services","image","text","Header","reto","bootcamp","Footer","AccexibleLogo","class","href","target","Home","Login","props","token","setToken","email","password","loginInput","setLoginInput","submitButtonIsActive","setSubmitButtonIsActive","emailInputCorrect","setEmailInputCorrect","loginFailed","setLoginFailed","setItem","EmailValidator","length","value","type","placeholder","onChange","e","event","emailInputCheck","disabled","fetch","method","headers","body","JSON","stringify","then","response","ok","json","data","catch","err","Signup","firstName","lastName","signUpInput","setSignUpInput","signupFailed","setSignupFailed","ActionProvider","createChatbotMessage","setStateFunc","createClientMessage","currentState","createCustomMessage","rest","this","setState","setShowChatBot","state","setUserAnswers","setChatting","infoMessages","info","parseInt","Math","random","prevState","messages","message","responseTime","userAnswers","questionIndex","questionsArray","nextQuestion","handleEndOfChat","document","querySelector","readOnly","widget","MessageParser","actionProvider","timeStamp","Date","now","match","handleShortMessage","handleUserMessageWithTiming","inputValidator","StartTestWidget","disableChatInput","EndTestWidget","ChatTestComponent","chatbotConfig","setChatbotConfig","chatting","chatbotIsLoading","setChatbotIsLoading","config","widgets","widgetName","widgetFunc","mapStateToProps","initialMessages","item","createChatBotMessage","alert","status","statusText","console","log","setResults","chatBotAnswers","placeholderText","headerText","messageParser","validator","QuestionsComponent","questions","setQuestion","selectedAnswer","setSelectedAnswer","setQuestionIndex","okButtonIsActive","setOkButtonIsActive","optionIsSelectedArray","setOptionIsSelectedArray","a","getQuestions","listaQuestions","fetchData","question","answers","answerIndividual","answer","score","previouslySelectedIndex","findIndex","answerInicial","scoreInicial","selectAnswer","testScore","setActualPart","responseFetch","respuestaJSON","FormularioEnviarComponent","setFirstName","setEmail","results","EmailConfirmation","Test","actualPart","testFinished","setTestFinished","parts","CalendarResultModal","start","extendedProps","toLocaleString","split","date","time","chatScore","totalScore","ChartJS","register","ArcElement","Tooltip","Legend","resultsColors","id","threshold","color","PersonalPage","userToken","undefined","setUser","userTestsResults","setUserTestsresults","calendarRef","useRef","Authorization","current","getApi","dataForDonutChart","initialView","plugins","dayGridPlugin","ref","events","dateTime","find","displayEventTime","eventDisplay","eventTimeFormat","hour","minute","hour12","eventClick","eventClickInfo","wrapper","createElement","ReactDOM","render","el","firstChild","swal","content","rangeCounts","forEach","labels","datasets","label","backgroundColor","borderWidth","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById"],"mappings":"8dAAaA,EAAW,CACtB,CACEC,MAAO,SACPC,IAAK,IACLC,YAAW,GAEb,CACEF,MAAO,eACPC,IAAK,iBACLC,YAAW,GAEb,CACEF,MAAM,YACNC,IAAI,aACJE,mBAAkB,GAEpB,CACEH,MAAO,QACPC,IAAK,UAEP,CACED,MAAO,WACPC,IAAK,YCtBM,G,MAAA,IAA0B,4C,OCM1B,SAASG,IACtB,IAAMC,EAAWC,cACjB,EAAuCC,mBAA0C,MAAhCC,aAAaC,QAAQ,UAAtE,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGAC,qBAAU,WAC6B,MAAjCN,aAAaC,QAAQ,SACvBE,GAAgB,GAEhBA,GAAgB,KAEjB,CAACH,aAAaC,QAAQ,WAGzB,IAAMM,EAAc,WAClBF,GAAYD,IAQRI,EAAWjB,EAASkB,QACxB,gBAAEf,EAAF,EAAEA,WAAWC,EAAb,EAAaA,kBAAb,OAAoCD,GAAeQ,GAAgBP,IAAwBO,IAAiBP,KAC1Ge,KAAI,WAAiBC,GAAW,IAAzBlB,EAAwB,EAAxBA,IAAKD,EAAmB,EAAnBA,MACd,OACE,6BACE,cAAC,IAAD,CAASoB,QAASL,EAAaM,OAAK,EAACC,GAAIrB,EAAKsB,gBAAgB,SAA9D,SACGvB,KAFImB,MAQb,OACE,gCACE,qBAAKK,UAAU,OAAf,SACE,cAAC,IAAD,CAAMA,UAAU,OAAOF,GAAG,IAA1B,SACE,qBACEG,IAAKC,EACLC,IAAI,uBAIV,qBAAKH,UAAU,YAAYJ,QAASL,EAApC,SACE,mBAAGS,UAAWZ,EAAU,eAAiB,kBAE3C,qBAAIY,UAAWZ,EAAU,YAAc,kBAAvC,UACGI,EACAN,EAAe,wBAAQc,UAAU,cAAcJ,QAhCvC,WACbZ,aAAaoB,QACbvB,EAAS,QA8BwE,W,MCtDtE,SAASwB,EAAT,GAAyC,IAAtBC,EAAqB,EAArBA,MAAO9B,EAAc,EAAdA,MAAO+B,EAAO,EAAPA,KAC5C,OACI,qBAAKP,UAAU,kBAAf,SACI,qBAAKA,UAAU,UAAf,SACI,sBAAKA,UAAU,kBAAf,UACI,qBAAKC,IAAKK,EAAOH,IAAI,KACrB,oBAAIH,UAAU,UAAd,SAAyBxB,IACzB,mBAAGwB,UAAU,SAAb,SACKO,W,UCXV,MAA0B,yCCA1B,MAA0B,0CCM1B,SAASC,IACtB,OACE,qCACE,qBAAKR,UAAU,SAAf,SACE,qBAAKA,UAAU,YACXC,IAAI,0HACJE,IAAI,wBAGV,sBAAKH,UAAY,kBAAjB,UACE,oBAAIA,UAAY,cAAhB,+CACE,uBACA,qBAAKA,UAAY,kBAAjB,SACE,cAAC,IAAD,CAAMA,UAAU,OAAOF,GAAG,iBAA1B,SACE,wBAAQE,UAAY,eAApB,iCAMN,sBAAKA,UAAU,qBAAf,UACI,cAAC,EAAD,CAAWM,MAAOG,EAAMjC,MAAO,oBAC/B+B,KAAM,oJAEN,cAAC,EAAD,CAAWD,MAAOI,EAAUlC,MAAO,iBACnC+B,KAAM,CAAC,uBAAwB,uBAAO,uBAAO,0CAAqC,uBAAO,yCAAiC,uBAAO,wC,MC5B9H,SAASI,IACpB,OACI,mCACA,sBAAKX,UAAU,SAAf,UACA,sBAAKA,UAAU,kBAAf,UACI,qBAAKA,UAAU,MAAf,SACI,iCACI,qBACIC,IAAKW,EACLT,IAAI,uBAIhB,sBAAKH,UAAU,MAAf,UACI,2CACA,oDACA,8FAEJ,sBAAKa,MAAM,MAAX,UACI,wCACA,+CACA,sDAEJ,sBAAKb,UAAU,MAAf,UACI,uDACA,sBAAKA,UAAU,SAAf,UACI,mBAAGc,KAAK,gCAAgCC,OAAO,SAASf,UAAU,mBAClE,mBAAGc,KAAK,mEAAmEC,OAAO,SAASf,UAAU,gCAIjH,qBAAKA,UAAU,sBAAf,SACI,+CAAmB,0CAAnB,0CChCG,SAASgB,IACpB,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,O,yBCAO,SAASC,EAAMC,GAE5B,IAAIrC,EAAWC,cAGf,EAAwBC,mBAASC,aAAaC,QAAQ,UAAtD,mBAAKkC,EAAL,KAAYC,EAAZ,KACA,EAAkCrC,mBAAS,CACzCsC,MAAO,GACPC,SAAU,KAFZ,mBAAKC,EAAL,KAAiBC,EAAjB,KAIA,EAAsDzC,oBAAS,GAA/D,mBAAK0C,EAAL,KAA2BC,EAA3B,KACA,EAA+C3C,oBAAS,GAAxD,mBAAK4C,EAAL,KAAuBC,EAAvB,KACA,EAAmC7C,oBAAS,GAA5C,mBAAK8C,EAAL,KAAiBC,EAAjB,KAkBA,OAbAxC,qBAAU,WACK,MAAT6B,IACAnC,aAAa+C,QAAQ,QAAQZ,GAC7BtC,EAAS,QAEZ,CAACsC,IAGJ7B,qBAAU,WACRoC,EAyEEM,WAAwBT,EAAWF,QACnCE,EAAWD,SAASW,OAAS,KAzE/B,CAACV,IAID,yBAASvB,UAAU,uBAAnB,SACE,sBAAKA,UAAU,yBAAf,UACE,oDACA,sBAAKA,UAAU,YAAf,UACE,uBAAOA,UAAU,aACfkC,MAAOX,EAAWF,MAClBc,KAAK,OACLC,YAAY,wBACZC,SAAU,SAACC,IAoDrB,SAAyBC,GACvB,IAAIlB,EAAQkB,EAAMxB,OAAOmB,MACzBN,EAAsBI,WAAwBX,IArDpCmB,CAAgBF,GAChBd,EAAc,2BAAKD,GAAN,IAAkBF,MAAOiB,EAAEvB,OAAOmB,YAGlDP,EAAoB,KAAO,mBAAG3B,UAAU,aAAb,SAA0B,qFAExD,sBAAKA,UAAU,YAAf,UACE,uBAAOA,UAAU,aACfkC,MAAOX,EAAWD,SAClBa,KAAK,WACLC,YAAY,gBACZC,SAAU,SAACC,GAAD,OACRd,EAAc,2BAAKD,GAAN,IAAkBD,SAAUgB,EAAEvB,OAAOmB,YAGtD,4BAAG,+BAEL,qBAAKlC,UAAU,YAAf,SACE,wBAAQA,UAAU,cAAcmC,KAAK,SAASM,UAAWhB,EAAsB7B,QAUvF,WACE8C,MAAM,cAAe,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUxB,KAEpByB,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAMF,KAGTD,MAAK,SAACI,GAELhC,EAASgC,EAAKjC,UAEfkC,OAAM,SAACC,GACNxB,GAAe,OA5Bb,iCAEDD,EAAc,mBAAG7B,UAAU,aAAb,SAA0B,2EAAuD,U,MC5DzF,SAASuD,EAAOrC,GAE7B,IAAIrC,EAAWC,cAGf,EAAwBC,mBAASC,aAAaC,QAAQ,UAAtD,mBAAKkC,EAAL,KAAYC,EAAZ,KACA,EAA0CrC,oBAAS,GAAnD,mBACA,GADA,UACoCA,mBAAS,CAC3CsC,MAAO,GACPmC,UAAW,GACXC,SAAU,GACVnC,SAAU,MAJZ,mBAAKoC,EAAL,KAAkBC,EAAlB,KAMA,EAAsD5E,oBAAS,GAA/D,mBAAK0C,EAAL,KAA2BC,EAA3B,KACA,EAAgD3C,oBAAS,GAAzD,mBAAK4C,EAAL,KAAwBC,EAAxB,KACA,EAAsC7C,oBAAS,GAA/C,mBAAK6E,EAAL,KAAmBC,EAAnB,KAkBA,OAbAvE,qBAAU,WACK,MAAT6B,IACFnC,aAAa+C,QAAQ,QAASZ,GAC9BtC,EAAS,QAEV,CAACsC,IAGJ7B,qBAAU,WACRoC,EAoHEM,WAAwB0B,EAAYrC,QACpCqC,EAAYpC,SAASW,OAAS,GAC9ByB,EAAYF,UAAUvB,OAAS,GAC/ByB,EAAYD,SAASxB,OAAS,KAtH/B,CAACyB,IAIF,yBAAS1D,UAAU,sBAAnB,SACE,sBAAKA,UAAU,wBAAf,UACE,0DAEA,qBAAKA,UAAU,WAAf,SACE,uBACEA,UAAU,YACVkC,MAAOwB,EAAYF,UACnBrB,KAAK,OACLC,YAAY,SACZC,SAAU,SAACC,GAAD,OACRqB,EAAe,2BAAKD,GAAN,IAAmBF,UAAWlB,EAAEvB,OAAOmB,cAI3D,qBAAKlC,UAAU,WAAf,SACE,uBACEA,UAAU,YACVkC,MAAOwB,EAAYD,SACnBtB,KAAK,OACLC,YAAY,YACZC,SAAU,SAACC,GAAD,OACRqB,EAAe,2BAAKD,GAAN,IAAmBD,SAAUnB,EAAEvB,OAAOmB,cAK1D,sBAAKlC,UAAU,WAAf,UACE,uBACEA,UAAU,YACVkC,MAAOwB,EAAYrC,MACnBc,KAAK,QACLC,YAAY,wBACZC,SAAU,SAACC,GACTqB,EAAe,2BAAKD,GAAN,IAAmBrC,MAAOiB,EAAEvB,OAAOmB,SAqE7D,SAAyBK,GACvB,IAAIlB,EAAQkB,EAAMxB,OAAOmB,MACzBN,EAAqBI,WAAwBX,IAtEnCmB,CAAgBF,MAGnBX,EAAoB,KACnB,mBAAG3B,UAAU,aAAb,SACE,qFAKN,qBAAKA,UAAU,WAAf,SACE,uBACEA,UAAU,YACVkC,MAAOwB,EAAYpC,SACnBa,KAAK,WACLC,YAAY,gBACZC,SAAU,SAACC,GAAD,OACRqB,EAAe,2BAAKD,GAAN,IAAmBpC,SAAUgB,EAAEvB,OAAOmB,cAI1D,qBAAKlC,UAAU,WAAf,SACE,wBACEmC,KAAK,SACLnC,UAAU,aACVyC,UAAWhB,EACX7B,QAmBV,WACE8C,MAAM,eAAgB,CACpBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUW,KAEpBV,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAMF,KAGTD,MAAK,SAACI,GAELhC,EAASgC,EAAKjC,UAEfkC,OAAM,SAACJ,GACNY,GAAgB,OAzCd,wBASDD,EACC,mBAAG5D,UAAU,aAAb,SACE,0GAIA,U,kDCrCG8D,E,WA3Eb,WAAYC,EAAsBC,EAAcC,EAAoBC,EAAaC,EAAoBC,GAAO,oBAC1GC,KAAKN,qBAAuBA,EAC5BM,KAAKC,SAAWN,EAChBK,KAAKJ,oBAAsBA,EAC3BI,KAAKE,eAAsBH,EAAKG,eAChCF,KAAKG,MAAsBN,EAC3BG,KAAKI,eAAsBL,EAAKK,eAChCJ,KAAKK,YAAsBN,EAAKM,Y,sDAIlC,WAAuB,IAAD,OACdC,EAAe,CACnB,mFACA,+CACA,iDAEEC,EAAOD,EAAaE,SAASC,KAAKC,SAASJ,EAAa1C,SAE5DoC,KAAKC,UAAS,SAAAU,GACZ,OAAO,2BACFA,GADL,IAEEC,SAAS,GAAD,mBACHD,EAAUC,UADP,CAEN,EAAKlB,qBAAsBa,Y,yCAOnC,SAA6BM,EAAQC,GAEnCd,KAAKI,gBAAe,SAACW,GACnB,MAAM,GAAN,mBAAWA,GAAX,CAAuB,CAAC7E,KAAK2E,EAAQC,aAAaA,QAGhDd,KAAKG,MAAMa,eAAehB,KAAKG,MAAMc,eAAerD,OAAO,EAC7DoC,KAAKkB,eAELlB,KAAKmB,oB,6BAKT,WAAmB,IAAD,OAEhBC,SAASC,cAAc,iCAAiCC,UAAS,EACjEtB,KAAKC,UAAS,SAAAU,GAAS,kCAClBA,GADkB,IAErBC,SAAS,GAAD,mBACHD,EAAUC,UADP,CAEN,EAAKlB,qBAAqB,6CAA0C,CAAC6B,OAAO,sB,0BAMlF,WAAe,IAAD,OACZvB,KAAKC,UACH,SAAAU,GACE,OAAO,2BACFA,GADL,IAEEC,SAAS,GAAD,mBACHD,EAAUC,UADP,CAEN,EAAKlB,qBAAqB,EAAKS,MAAMc,eAAe,EAAKd,MAAMa,kBAEjEA,cAAc,EAAKb,MAAMa,cAAgB,W,KChDpCQ,E,WAnBb,WAAYC,EAAgBtB,GAAQ,oBAClCH,KAAKyB,eAAiBA,EACtBzB,KAAKG,MAAQA,EACbH,KAAK0B,UAAYC,KAAKC,M,yCAGxB,SAAMf,GAEJ,GAAKA,EAAQgB,MAAM,WAAWjE,QAAQ,GACpCoC,KAAKyB,eAAeK,yBADtB,CAKA,IAAIhB,GAAgBa,KAAKC,MAAM5B,KAAK0B,WAAW,IAC/C1B,KAAKyB,eAAeM,4BAA4BlB,EAAQC,Q,KCf7C,SAASkB,EAAenB,GACnC,OAAOA,EAAQjD,OAAS,E,YCEb,SAASqE,EAAgBpF,GAQpC,OALA5B,qBAAU,WACNmG,SAASC,cAAc,iCAAiCC,SAASzE,EAAMqF,mBACzE,IAIE,qBAAKvG,UAAU,kBAAf,SACI,wBAAQa,MAAM,aAAajB,QAAUsB,EAAMqF,iBAOnD,WACId,SAASC,cAAc,iCAAiCC,UAAS,EACjEzE,EAAM4E,eAAeP,eACrBrE,EAAMoD,UAAS,SAAAU,GACX,OAAO,2BACAA,GADP,IAEIuB,kBAAiB,QAb8D,KAAnF,4BCVG,SAASC,EAActF,GAGlC,OACI,8BACI,wBAAQL,MAAM,aAAajB,QAOnC,WACIsB,EAAMwD,aAAY,IARd,yB,MCKG,SAAS+B,EAAkBvF,GAGtC,MAA6CnC,qBAA7C,mBAAK2H,EAAL,KAAoBC,EAApB,KACA,EAA6C5H,oBAAS,GAAtD,mBAAK6H,EAAL,KAAclC,EAAd,KACA,EAA6C3F,oBAAS,GAAtD,mBAAK8H,EAAL,KAAsBC,EAAtB,KACA,EAA6C/H,mBAAS,IAAtD,mBAAKqG,EAAL,KAAiBX,EAAjB,KAkBA,OAfAnF,qBAwCA,WACIoD,MAAM,yBACDM,MAAK,SAAAC,GACF,GAAIA,EAASC,GAAI,OAAOD,EAASE,OACjC,MAAMF,KAETD,MAAK,SAAAC,GAEF,IAAI8D,EAAS,CACTC,QAAQ,CACJ,CACIC,WAAY,aACZC,WAAY,SAAChG,GAAD,OAAW,cAACoF,EAAD,eAAqBpF,KAC5CiG,gBAAiB,CAAC,qBAEtB,CACIF,WAAY,WACZC,WAAY,SAAChG,GAAD,OAAW,cAACsF,EAAD,eAAmBtF,KAC1CA,MAAO,CAACwD,YAAYA,MAKhCqC,EAAOK,gBAAkBnE,EACpBxD,QACG,SAAA4H,GAAI,MAAc,aAAZA,EAAKlF,QAEdzC,KACG,SAAA2H,GAAI,OAAEC,+BAAsBD,EAAK9G,KAAM,CAACqF,OAAO,kBAGvD,IAAIpB,EAAQ,CACRuB,UAAYC,KAAKC,MACjBZ,cAAc,EACdkB,kBAAiB,GAErB/B,EAAMc,eAAiBrC,EAClBxD,QACG,SAAA4H,GAAI,MAAc,aAAZA,EAAKlF,QAEdzC,KACG,SAAA2H,GAAI,OAAEA,EAAK9G,QAEnBwG,EAAOvC,MAAQA,EAEfmC,EAAiB,eAAII,IACrBD,GAAoB,MAEvBzD,OAAM,SAAAC,GACHiE,MAAM,eAAD,OAAgBjE,EAAIkE,OAApB,cAAgClE,EAAImE,WAApC,MACLC,QAAQC,IAAIrE,QA1FO,IAE/BhE,qBAAU,WACDsH,GAED1F,EAAM0G,YAAY,SAAA5C,GACd,OAAO,2BACAA,GADP,IAEI6C,eAAe,YAAIzC,UAIjC,CAACwB,IAIC,yBAAS5G,UAAU,eAAnB,SACI,qBAAKA,UAAU,sBAAf,UAEW6G,GAAoBD,EACvB,cAAC,IAAD,CACIkB,gBAAgB,YAChBC,WAAW,oBACXhB,OAAQL,EACRsB,cAAenC,EACfC,eAAgBhC,EAChBmE,UAAW5B,EACX5B,eAAgBA,EAChBC,YAAaA,IAEjB,mBAAG1E,UAAU,WAAb,kC,mCCoCLkI,MAlFf,SAA4BhH,GACxB,MAAiCnC,mBAAS,IAA1C,mBAAOoJ,EAAP,KAAkBC,EAAlB,KACA,EAAoDrJ,mBAAS,CAAC,KAA9D,mBACA,GADA,UAC4CA,sBAA5C,mBAAOsJ,EAAP,KAAuBC,EAAvB,KACA,EAA0CvJ,mBAAS,GAAnD,mBAAOsG,EAAP,KAAsBkD,EAAtB,KACA,EAA6CxJ,oBAAS,GAAtD,mBAAKyJ,EAAL,KAAsBC,EAAtB,KACA,EAAuD1J,mBAAS,EAAC,GAAM,GAAM,GAAM,IAAnF,mBAAK2J,EAAL,KAA2BC,EAA3B,KAUA,OARArJ,qBAAU,WAAM,4CACZ,4BAAAsJ,EAAA,sEAC+BC,IAD/B,OACQC,EADR,OAEIV,EAAYU,GAFhB,4CADY,uBAAC,WAAD,wBAKZC,KACD,IAGC,mCACI,qBAAK/I,UAAU,YAAf,SAEAmI,EAAUlG,OAAS,GAAKoD,EAAgB8C,EAAUlG,QAC9C,sBAAKjC,UAAU,aAAf,UACI,qBAAKA,UAAU,oBAAf,SACI,wBAAOA,UAAU,mBAAjB,UAAqCmI,EAAU9C,GAAe2D,SAA9D,SAEJ,uBAEAb,EAAU9C,GAAe4D,QAAQvJ,KAAI,SAAUwJ,EAAiBvJ,GAC5D,OACI,qCACI,yBAAQK,UAAW0I,EAAsB/I,GAAS,WAAa,oBAAqBC,QAAS,kBAkBzH,SAAsBuJ,EAAQC,EAAMzJ,GAChC,IAAI0J,EAA0BX,EAAsBY,WAAU,SAAAjC,GAAI,OAAEA,KAChEgC,GAA2B,IAAGX,EAAsBW,IAA2B,GACnFX,EAAsB/I,IAAS,EAC/BgJ,EAAyB,YAAID,IAC7BD,GAAoB,GACpBH,EAAkB,CAAEiB,cAAeJ,EAAQK,aAAcJ,IAxBkEK,CAAaP,EAAiB3I,KAAM2I,EAAiBE,MAAMzJ,IAA9J,UAAuKuJ,EAAiB3I,KAAxL,OACA,6BAKZ,uBACA,qBAAKP,UAAU,oBAAf,SACI,sBAAKA,UAAU,+BAAf,UACI,mBAAGA,UAAU,8BAAb,mBAA+CqF,GAAiB8C,EAAUlG,OAAS,EAAIoD,EAAgB,EAAI,GAA3G,cAAmH8C,EAAUlG,UAC7H,wBAAQjC,UAAW,kBAAoBwI,EAAmB,GAAK,4BAA6B5I,QAAU4I,EAAmB,kBAiBjJ,WACItH,EAAM0G,YAAY,SAAA5C,GACd,OAAO,2BACAA,GADP,IAEI0E,UAAU1E,EAAU0E,UAAYrB,EAAemB,kBAGnDnE,IAAkB8C,EAAUlG,OAAS,GACrCf,EAAMyI,cAAc,QAExBlB,GAAoB,GACpBE,EAAyB,EAAC,GAAM,GAAM,GAAM,IAC5CJ,EAAiBlD,EAAgB,GA7BkHE,IAAiB,KAAhJ,wCAmCxB,SAASsD,IAIL,OAHenG,MAAM,uBAChBM,MAAK,SAAA4G,GAAa,OAAIA,EAAczG,UACpCH,MAAK,SAAA6G,GAAa,OAAIA,O,MCtBpBC,MA3Df,SAAmC5I,GAE/B,MAAkCnC,mBAAS,IAA3C,mBAAOyE,EAAP,KAAkBuG,EAAlB,KACA,EAA0BhL,mBAAS,IAAnC,mBAAOsC,EAAP,KAAc2I,EAAd,KAaA,OACI,mCACA,yBAAShK,UAAU,cAAnB,SACI,sBAAKA,UAAU,gBAAf,UACA,iEACI,sBAAKA,UAAU,YAAf,UACI,uBAAOA,UAAU,aAAamC,KAAK,QAAQC,YAAY,QAAQC,SAZ/E,SAAsBE,GAClByH,EAASzH,EAAMxB,OAAOmB,UAYV,0BAEJ,qBAAKlC,UAAU,YAAf,SACI,uBAAOA,UAAU,aAAamC,KAAK,OAAOC,YAAY,SAASC,SApB/E,SAA0BE,GACtBwH,EAAaxH,EAAMxB,OAAOmB,YAqBlB,qBAAKlC,UAAU,YAAf,SACI,wBAAQA,UAAU,cAAcJ,QAAS,WAQrD8C,MAAM,eAAgB,CAClBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjB2G,UAAWxI,EAAM+I,QAAQP,UACzB7B,eAAgB3G,EAAM+I,QAAQpC,eAC9BrE,UAAWA,EACXnC,MAAOA,MAGV2B,MAAK,SAAAC,GACF,IAAKA,EAASC,GAAI,MAAMD,EACxB/B,EAAMyI,cAAc,4BAtBhB,8B,MCLLO,MArBf,SAA2BhJ,GAEvB,OACI,mCACA,qBAAKlB,UAAU,2BAAf,SACI,qBAAKA,UAAU,6BAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,yEAAwC,uBAAxC,+CAAyF,uBAAzF,+BACA,cAAC,IAAD,CAAMF,GAAG,IAAT,SACI,wBAAQE,UAAU,qBAAlB,4BCRT,SAASmK,EAAKjJ,GAGzB,MAA2BnC,mBAAS,CAChC2K,UAAY,EACZ7B,eAAgB,KAFpB,mBAAKoC,EAAL,KAAarC,EAAb,KAKA,EAAiC7I,mBAAS,QAA1C,mBAAKqL,EAAL,KAAgBT,EAAhB,KAEA,EAAqC5K,oBAAS,GAA9C,mBAAKsL,EAAL,KAAkBC,EAAlB,KAKAhL,qBAAU,WACF2K,EAAQpC,eAAe5F,OAAS,GAAKgI,EAAQP,UAAY,GACzDY,GAAgB,KAEtB,CAACL,IAGH3K,qBAAU,WACF+K,IAEqC,MAAhCrL,aAAaC,QAAQ,SAiC9ByD,MAAM,eAAgB,CAClBC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAgB,UAAhB,OAA2B5D,aAAaC,QAAQ,WAEpD4D,KAAMC,KAAKC,UAAU,CACjB2G,UAAWO,EAAQP,UACnB7B,eAAgBoC,EAAQpC,mBAE7B7E,MAAK,SAAAC,GACJ,IAAMA,EAASC,GAAK,MAAMD,EAC1B0G,EAAc,2BACftG,OAAO,SAAAJ,GACNA,EAASE,OAAOH,KAAK0E,QAAQC,QA5CzBgC,EAAc,mBAGxB,CAACU,IAKH,IAAIE,EAAQ,CACR,KAAQ,kBAAM,cAAC,EAAD,CAAoBZ,cAAeA,EAAe/B,WAAYA,KAC5E,KAAQ,kBAAM,cAAC,EAAD,CAAoB+B,cAAeA,EAAe/B,WAAYA,KAC5E,eAAgB,kBAAM,cAAC,EAAD,CAA2B+B,cAAeA,EAAeM,QAASA,KACxF,uBAAuB,kBAAK,cAAC,EAAD,MAIpBjL,aAAaC,QAAQ,SAGjC,OACI,mCACKsL,EAAMH,O,iECtDJ,SAASI,EAAT,GAA6D,IAAD,IAA9BjI,MAAOkI,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,cACtD,EAAkBD,EAAME,eAAe,SAASC,MAAM,KAAtD,mBAAKC,EAAL,KAAUC,EAAV,KACA,OACE,sBAAK9K,UAAU,UAAf,UACE,sDAAuB6K,EAAvB,kBAAqCC,KACrC,uBACA,sBAAK9K,UAAU,yBAAf,UACE,yDAAyB0K,EAAchB,aACvC,yDAAyBgB,EAAcK,aACvC,sDAAsBL,EAAcM,oBCI9CC,IAAQC,SAASC,IAAYC,IAASC,KAEtC,IAAMC,EAAgB,CACpB,CAAEC,GAAI,EAAGC,UAAW,EAAGC,MAAO,WAC9B,CAAEF,GAAI,EAAGC,UAAW,GAAIC,MAAO,WAC/B,CAAEF,GAAI,EAAGC,UAAW,GAAIC,MAAO,YAGlB,SAASC,EAAaxK,GAEnC,MAAkBnC,mBAASC,aAAaC,QAAQ,UAA3C0M,EAAL,oBACA,EAAsB5M,wBAAS6M,GAA/B,mBAAWC,GAAX,WACA,EAA8C9M,wBAAS6M,GAAvD,mBAAKE,EAAL,KAAuBC,EAAvB,KAGIlN,EAAWC,cAGTkN,EAAcC,iBAAO,MAkB3B,OAfA3M,qBAAU,WAER,GAAiB,MAAbqM,EAAmB,OAAO9M,EAAS,KA8EvC6D,MAAM,aAAc,CAClBE,QAAS,CACPsJ,cAAc,UAAD,OAAYP,MAG1B3I,MAAK,SAACC,GACL,IAAKA,EAASC,GAAI,MAAMD,EACxB,OAAOA,EAASE,UAEjBH,MAAK,SAACI,GACLyI,EAAQzI,MAMZV,MAAM,eAAgB,CACpBE,QAAS,CACPsJ,cAAc,UAAD,OAAYP,MAG1B3I,MAAK,SAACC,GACL,IAAKA,EAASC,GAAI,MAAMD,EACxB,OAAOA,EAASE,UAEjBH,MAAK,SAACI,GACL2I,EAAoB3I,QApGvB,IAEH9D,qBAAU,WACR,QAAwBsM,GAApBE,EAA+B,CACbE,EAAYG,QAAQC,SACxCC,OAED,CAACP,IAGF,wCACuBF,GAApBE,EACC,mCACA,0BAAS9L,UAAU,kBAAnB,UACE,yBAASA,UAAU,oBAAnB,SACE,qBAAKa,MAAM,WAAX,SACE,cAAC,IAAD,CACEyL,YAAY,eACZC,QAAS,CAACC,KACVC,IAAKT,EACLU,OAyBLZ,EAAiBpM,KACtB,gBAAGiN,EAAH,EAAGA,SAAUjD,EAAb,EAAaA,UAAWqB,EAAxB,EAAwBA,UAAWC,EAAnC,EAAmCA,WAAnC,MAAqD,CACnDxM,MAAO,GACPiM,MAAOkC,EACPjD,YACAqB,YACAC,aACAS,MAAOH,EAAcsB,MAAK,gBAAGpB,EAAH,EAAGA,UAAH,OAAmBR,GAAcQ,KACxDC,UAhCKoB,kBAAkB,EAClBC,aAAa,QACbC,gBAAiB,CACfC,KAAM,UACNC,OAAQ,UACRC,QAAQ,GAEVC,WA8Bd,SAA4BC,GAE1B,IAAIC,EAAU5H,SAAS6H,cAAc,OACrCC,IAASC,OACP,cAAC,EAAD,CAAqBjL,MAAO6K,EAAe7K,QAC3C8K,GAEF,IAAII,EAAKJ,EAAQK,WACjBC,IAAK,CACHC,QAASH,WAnCH,yBAASzN,UAAU,iBAAnB,SACE,qBAAKA,UAAU,QAAf,SACE,cAAC,IAAD,CAAUoD,KAAMiJ,eAKtB,OAiER,SAASA,IACP,IAAIwB,EAAc,CAAC,EAAG,EAAG,GAuBzB,OArBA/B,EAAiBgC,SAAQ,YAAqB,IAAlB9C,EAAiB,EAAjBA,WACtBrL,EAAQ2L,EAAchC,WACxB,gBAAGkC,EAAH,EAAGA,UAAH,OAAmBR,GAAcQ,KAE/B7L,GAAS,IAAGkO,EAAYlO,IAAU,MAE7B,CACToO,OAAQ,CACN,6BACA,0BACA,6BAEFC,SAAU,CACR,CACEC,MAAO,iCACP7K,KAAMyK,EACNK,gBAAiB5C,EAAc5L,KAAI,qBAAG+L,SACtC0C,YAAa,MChIRC,MApBf,WACE,OACE,8BACA,eAAC,IAAD,WACE,cAAC,EAAD,IACA,+BAEE,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAACtN,EAAD,MACzB,cAAC,IAAD,CAAOqN,KAAK,iBAAiBC,QAAS,cAACnE,EAAD,MACtC,cAAC,IAAD,CAAOkE,KAAK,SAASC,QAAU,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOD,KAAK,UAAUC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOD,KAAK,aAAaC,QAAU,cAAC,EAAD,iBClBhCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzL,MAAK,YAAkD,IAA/C0L,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdjB,IAASC,OACP,cAAC,IAAMuB,WAAP,UACE,cAAC,EAAD,MAGFtJ,SAASuJ,eAAe,SAM1BT,M","file":"static/js/main.b5f63aed.chunk.js","sourcesContent":["export const MenuList = [\n  {\n    title: \"Inicio\",\n    url: \"/\",\n    showAlways:true,\n  },\n  {\n    title: \"Iniciar Test\",\n    url: \"/test-ansiedad\",\n    showAlways:true,\n  },\n  {\n    title:'Historial',\n    url:'/dashboard',\n    showOnlyForLogged:true\n  },\n  {\n    title: \"Login\",\n    url: \"/login\",\n  },\n  {\n    title: \"Registro\",\n    url: \"/signup\",\n  },\n];\n  ","export default __webpack_public_path__ + \"static/media/accexible-logo.a56af421.png\";","import React, { useState , useEffect} from \"react\";\nimport { NavLink, Link, useNavigate } from \"react-router-dom\";\nimport { MenuList } from \"./MenuList\";\nimport \"./NavBar.css\";\nimport AccesibleLogo from \"../../assets/images/accexible-logo.png\";\n\nexport default function Navbar (){\n  const navigate = useNavigate();\n  const [userIsLogged,setUserIsLogged] = useState( localStorage.getItem('token') !=null )\n  const [clicked, setClicked] = useState(false);\n  \n\n  useEffect(() => {\n    if (localStorage.getItem(\"token\") == null) {\n      setUserIsLogged(false);\n    } else {\n      setUserIsLogged(true);\n    }\n  }, [localStorage.getItem(\"token\")]);\n\n\n  const handleClick = () => {\n    setClicked(!clicked);\n  };\n\n  const logout = () => {\n    localStorage.clear();\n    navigate('/');\n  }\n\n  const menuList = MenuList.filter(\n    ({showAlways,showOnlyForLogged}) => showAlways || (userIsLogged && showOnlyForLogged) || (!userIsLogged && !showOnlyForLogged)\n    ).map(({ url, title }, index) => {\n    return (\n      <li key={index}>\n        <NavLink onClick={handleClick} exact to={url} activeClassName=\"active\">\n          {title}\n        </NavLink>\n      </li>\n    );\n  });\n\n  return (\n    <nav>\n      <div className=\"logo\">\n        <Link className=\"link\" to=\"/\">\n          <img\n            src={AccesibleLogo}\n            alt=\"logo AcceXible\"\n          />\n        </Link>\n      </div>\n      <div className=\"menu-icon\" onClick={handleClick}>\n        <i className={clicked ? \"fas fa-times\" : \"fas fa-bars\"}></i>\n      </div>\n      <ul className={clicked ? \"menu-list\" : \"menu-list close\"}>\n        {menuList}\n        {userIsLogged ? <button className=\"closeButton\" onClick={logout}></button> : null}\n      </ul>\n    </nav>\n  );\n};\n\n","import React from 'react';\nimport \"./Services.css\"\n\nexport default function Services({image, title, text}) {\n    return (\n        <div className=\"servicesSection\">\n            <div className=\"service\">\n                <div className=\"service-content\">\n                    <img src={image} alt=\"\"/>\n                    <h5 className=\"s-title\">{title}</h5>\n                    <p className=\"s-text\">\n                        {text}\n                    </p>\n                </div>\n            </div>\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/logotipo.bbk.49cd3168.svg\";","export default __webpack_public_path__ + \"static/media/logocode4jobs.bd88943a.svg\";","import { Link } from \"react-router-dom\";\nimport Services from '../Services/Services';\nimport \"./Header.css\";\nimport reto from '../ChatTest/assets/logotipo.bbk.svg';\nimport bootcamp from '../ChatTest/assets/logocode4jobs.svg';\n\nexport default function Header() {\n  return (\n    <>\n      <div className=\"header\">\n        <img className=\"headerImg\"\n            src=\"https://images-ext-2.discordapp.net/external/gUyG6SbaJrMWT5_P1TQuNvFpXzibV569HqBRvW4HRBA/https/i.imgur.com/IGWfqHIh.jpg\"\n            alt=\"imagen del Header\"\n        />\n      </div>\n      <div className = \"containerHeader\" >\n        <h1 className = \"titleHeader\">Salud Mental Accesible Para Tod@s</h1>\n          <br/>\n          <div className = \"containerButton\">\n            <Link className=\"link\" to=\"/test-ansiedad\">\n              <button className = \"buttonHeader\">\n              Iniciar Test\n              </button>\n            </Link>\n          </div>\n        </div>\n        <div className=\"services-container\">\n            <Services  image={reto} title={'RETO BBK BOOTCAMP'} \n            text={'Sistema de prueba para la detección de síntomas depresivos, cuadros de ansiedad e indicativos de necesidad de atención psicológica.'}\n            />\n            <Services  image={bootcamp} title={'EQUIPO BREATHE'} \n            text={['Reto realizado por: ', <br/>, <br/>, '- Joseba Iñaki García Barrenengoa', <br/>, '- Miguel Ángel Simón Martínez', <br/>, '- Roque Carrillo Martínez']}\n            />\n        </div>\n    </>\n  );\n}\n","import './Footer.css';\nimport AccexibleLogo from '../../assets/images/accexible-logo.png'\n\nexport default function Footer() {\n    return (\n        <>\n        <div className=\"footer\">\n        <div className=\"containerFooter\">\n            <div className=\"box\">\n                <figure>\n                    <img\n                        src={AccexibleLogo}\n                        alt=\"logo AcceXible\"\n                    />\n                </figure>\n            </div>\n            <div className=\"box\">\n                <h2>Barcelona</h2>\n                <p>Barcelona Tech City</p>\n                <p>Plaça de Pau Vila, 1 Bloc A, Planta 3, Porta 3A1, 08003</p>\n            </div>\n            <div class=\"box\">\n                <h2>Bilbao</h2>\n                <p>INNOLAB Bilbao</p>\n                <p>Gordoniz 44, 48002</p>\n            </div>\n            <div className=\"box\">\n                <h2>Contacta Con Nosotros</h2>\n                <div className=\"social\">\n                    <a href=\"https://twitter.com/accexible\" target=\"_blank\" className=\"fab fa-twitter\"></a>\n                    <a href=\"https://www.linkedin.com/company/accexible/?originalSubdomain=es\" target=\"_blank\" className=\"fab fa-linkedin-in\"></a>\n                </div>\n            </div>\n        </div>\n        <div className=\"containerInfoFooter\">\n            <small>&copy; 2021 <b>Code4Jobs</b> - Reto De Empresa AcceXible.</small>\n        </div>\n    </div>\n    </>\n    );\n}\n\n","import Header from \"../../Components/Header/Header\"\nimport Footer from \"../../Components/Footer/Footer\"\n\nexport default function Home() {\n    return (\n      <>\n        <Header />\n        <Footer />\n      </>\n    );\n  }","import { useNavigate } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport * as EmailValidator from \"email-validator\";\n\nimport \"./Login.css\"\n\nexport default function Login(props) {\n  // Navigation hook\n  let navigate = useNavigate();\n\n  // State hooks\n  let [token, setToken] = useState(localStorage.getItem(\"token\"));\n  let [loginInput, setLoginInput] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  let [submitButtonIsActive, setSubmitButtonIsActive] = useState(false);\n  let [emailInputCorrect,setEmailInputCorrect] = useState(true);\n  let [loginFailed,setLoginFailed] = useState(false);\n\n  // Effect hooks\n\n  // When the token is changed to the value returned by the backend, save the token in the local storage and navigate to the user page.\n  useEffect(() => {\n    if (token != null) {\n        localStorage.setItem('token',token);\n        navigate('/');\n    }\n  }, [token]);\n\n  // Effect hook that will listen to changes in the form data\n  useEffect(()=>{\n    setSubmitButtonIsActive(validateForm())\n  },[loginInput])\n\n  // render components\n  return (\n    <section className=\"loginRegisterSection\">\n      <div className=\"loginRegisterContainer\">  \n        <h2>Iniciar Sesión:</h2>\n        <div className=\"loginForm\">\n          <input className=\"loginInput\"\n            value={loginInput.email}\n            type=\"text\"\n            placeholder=\"correo electrónico\"\n            onChange={(e) =>{\n              emailInputCheck(e);\n              setLoginInput({ ...loginInput, email: e.target.value });\n            }}\n          />\n          {emailInputCorrect ? null : <p className=\"emailError\"><small>Formato de correo electrónico incorrecto</small></p>}\n        </div>\n        <div className=\"loginForm\">\n          <input className=\"loginInput\"\n            value={loginInput.password}\n            type=\"password\"\n            placeholder=\"contraseña\"\n            onChange={(e) =>\n              setLoginInput({ ...loginInput, password: e.target.value })\n            }\n          />\n          <p><small></small></p>\n        </div>\n        <div className=\"loginForm\">\n          <button className=\"loginButton\" type=\"button\" disabled={!submitButtonIsActive} onClick={login}>Iniciar sesión</button>\n        </div>\n        {loginFailed ? <p className=\"emailError\"><small>Email y/o contraseña incorrectos!</small></p> : null}\n      </div>\n    </section>\n  );\n\n  // Functions\n\n  // login to obtain a token for accesing user info\n  function login() {\n    fetch(\"/auth/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(loginInput),\n    })\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      })\n      .then((data) => {\n        // set the token in the state of the page\n        setToken(data.token);\n      })\n      .catch((err) => {\n        setLoginFailed(true);\n      });\n  }\n\n  // Function to check the email format\n  function emailInputCheck(event) {\n    let email = event.target.value;\n    setEmailInputCorrect( EmailValidator.validate(email) )\n  }\n\n  // Validate the form data\n  function validateForm() {\n    return (\n      EmailValidator.validate(loginInput.email) &&\n      loginInput.password.length > 0\n    )\n  }\n}\n","import { useNavigate } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport * as EmailValidator from \"email-validator\";\n\nimport \"./Signup.css\"\n\nexport default function Signup(props) {\n  // Navigation hook\n  let navigate = useNavigate();\n\n  // State hooks\n  let [token, setToken] = useState(localStorage.getItem(\"token\"));\n  let [submitIsActive, setSubmitIsActive] = useState(false);\n  let [signUpInput, setSignUpInput] = useState({\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    password: \"\",\n  });\n  let [submitButtonIsActive, setSubmitButtonIsActive] = useState(false);\n  let [emailInputCorrect, setEmailInputCorrect] = useState(true);\n  let [signupFailed, setSignupFailed] = useState(false);\n\n  // Effect hooks\n\n  // When the token is changed to the value returned by the backend, save the token in the local storage and navigate to the user page.\n  useEffect(() => {\n    if (token != null) {\n      localStorage.setItem(\"token\", token);\n      navigate(\"/\");\n    }\n  }, [token]);\n\n  // Effect hook that will listen to changes in the form data\n  useEffect(() => {\n    setSubmitButtonIsActive(validateForm());\n  }, [signUpInput]);\n\n  // Render components\n  return (\n    <section className=\"signRegisterSection\">\n      <div className=\"signRegisterContainer\">\n        <h2>Registrar nuevo usuario:</h2>\n        {/* Nombre y apellidos */}\n        <div className=\"signForm\">\n          <input\n            className=\"signInput\"\n            value={signUpInput.firstName}\n            type=\"text\"\n            placeholder=\"Nombre\"\n            onChange={(e) =>\n              setSignUpInput({ ...signUpInput, firstName: e.target.value })\n            }\n          />\n        </div>\n        <div className=\"signForm\">\n          <input\n            className=\"signInput\"\n            value={signUpInput.lastName}\n            type=\"text\"\n            placeholder=\"Apellidos\"\n            onChange={(e) =>\n              setSignUpInput({ ...signUpInput, lastName: e.target.value })\n            }\n          />\n        </div>\n        {/* Email */}\n        <div className=\"signForm\">\n          <input\n            className=\"signInput\"\n            value={signUpInput.email}\n            type=\"email\"\n            placeholder=\"Correo electrónico\"\n            onChange={(e) => {\n              setSignUpInput({ ...signUpInput, email: e.target.value });\n              emailInputCheck(e);\n            }}\n          />\n          {emailInputCorrect ? null : (\n            <p className=\"emailError\">\n              <small>Formato de correo electrónico incorrecto</small>\n            </p>\n          )}\n        </div>\n        {/* password */}\n        <div className=\"signForm\">\n          <input\n            className=\"signInput\"\n            value={signUpInput.password}\n            type=\"password\"\n            placeholder=\"contraseña\"\n            onChange={(e) =>\n              setSignUpInput({ ...signUpInput, password: e.target.value })\n            }\n          />\n        </div>\n        <div className=\"signForm\">\n          <button\n            type=\"button\"\n            className=\"signButton\"\n            disabled={!submitButtonIsActive}\n            onClick={register}\n          >\n            Registro\n          </button>\n        </div>\n        {signupFailed ? (\n          <p className=\"emailError\">\n            <small>\n              La dirección de correo ya está siendo usada por otro usuario.\n            </small>\n          </p>\n        ) : null}\n      </div>\n    </section>\n  );\n\n  // Functions\n\n  // Register and login to obtain a token for accesing user info\n  function register() {\n    fetch(\"/auth/signup\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(signUpInput),\n    })\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      })\n      .then((data) => {\n        // set the token in the state of the page\n        setToken(data.token);\n      })\n      .catch((response) => {\n        setSignupFailed(true);\n      });\n  }\n\n  // Function to check the email format\n  function emailInputCheck(event) {\n    let email = event.target.value;\n    setEmailInputCorrect(EmailValidator.validate(email));\n  }\n\n  // Validate the form data\n  function validateForm() {\n    return (\n      EmailValidator.validate(signUpInput.email) &&\n      signUpInput.password.length > 0 &&\n      signUpInput.firstName.length > 0 &&\n      signUpInput.lastName.length > 0\n    );\n  }\n}\n","class ActionProvider {\n  constructor(createChatbotMessage, setStateFunc, createClientMessage,currentState,createCustomMessage,rest) {\n    this.createChatbotMessage = createChatbotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n    this.setShowChatBot      = rest.setShowChatBot;\n    this.state               = currentState;\n    this.setUserAnswers      = rest.setUserAnswers;\n    this.setChatting         = rest.setChatting;\n  }\n\n  // Handle a message that is not long enough\n  handleShortMessage () {\n    const infoMessages = [\n      'Para que los resultados del test sean fiables necesito respuestas más largas.',\n      'Las respuestas tienen que ser más largas.',\n      'Necesito que escribas mensajes más largos.'\n    ]\n    let info = infoMessages[parseInt(Math.random()*infoMessages.length)];\n    // send a chatbot message asking the use for more input.\n    this.setState(prevState =>{\n      return {\n        ...prevState,\n        messages: [\n          ...prevState.messages,\n          this.createChatbotMessage( info )\n        ]\n      }\n    })\n  }\n\n  // Handle the input of a valid message\n  handleUserMessageWithTiming (message,responseTime) {\n    // Use the state hook for updating the list of user answers with its timing\n    this.setUserAnswers((userAnswers)=>{\n      return [...userAnswers,{text:message,responseTime:responseTime}]\n    })\n    \n    if (this.state.questionIndex<=this.state.questionsArray.length-1){\n      this.nextQuestion()\n    } else {\n      this.handleEndOfChat()\n    }\n  }\n\n  // Handle the end of chat\n  handleEndOfChat() {\n    // Right after the questions end, disable the text input of the chat\n    document.querySelector('.react-chatbot-kit-chat-input').readOnly=true\n    this.setState(prevState=>({\n      ...prevState,\n      messages:[\n        ...prevState.messages,\n        this.createChatbotMessage('Gracias. Pulsa el botón para finalizar.',{widget:'end-test'})\n      ],\n    }))\n  }\n\n  // Use the chat state hook to print the following message and advance the question Index\n  nextQuestion(){\n    this.setState(\n      prevState=>{\n        return {\n          ...prevState,\n          messages:[\n            ...prevState.messages,\n            this.createChatbotMessage(this.state.questionsArray[this.state.questionIndex])\n          ],\n          questionIndex:this.state.questionIndex + 1\n        }\n      }\n    )\n  }\n\n}\n\nexport default ActionProvider;","class MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n    this.timeStamp = Date.now();\n  }\n\n  parse(message) {\n    // If the message is not long enough, ask the user for more input\n    if ( message.match(/\\S+\\s*/g).length<=10 ){\n      this.actionProvider.handleShortMessage()\n      return\n    }\n    // Valid message, send it to the action provider that will render the next question\n    let responseTime = (Date.now()-this.timeStamp)/1000;\n    this.actionProvider.handleUserMessageWithTiming(message,responseTime);\n  }\n  \n}\n\nexport default MessageParser","export default function inputValidator(message) {\n    return message.length > 0;\n}","import { createChatBotMessage } from \"react-chatbot-kit\";\nimport { useEffect } from \"react/cjs/react.development\";\n\nexport default function StartTestWidget(props) {\n\n    // Right after this widget loads, disable the text input of the chat\n    useEffect(()=>{\n        document.querySelector('.react-chatbot-kit-chat-input').readOnly=props.disableChatInput\n    },[])\n\n    // render a button that when clicked will start the test\n    return (\n        <div className=\"containerButton\">\n            <button class=\"buttonTest\" onClick={ props.disableChatInput ? onClickStartButton : null}>\n                Iniciar Test\n            </button>\n        </div>\n    )\n\n    // handle start button click\n    function onClickStartButton() {\n        document.querySelector('.react-chatbot-kit-chat-input').readOnly=false;\n        props.actionProvider.nextQuestion();\n        props.setState(prevState=>{\n            return {\n                ...prevState,\n                disableChatInput:false\n            }\n        })\n    }\n\n}","import { createChatBotMessage } from \"react-chatbot-kit\";\nimport { useEffect } from \"react/cjs/react.development\";\n\nexport default function EndTestWidget(props) {\n\n    // render a button that when clicked will close the chatbot\n    return (\n        <div>\n            <button class=\"buttonTest\" onClick={onClickEndButton}>\n                Finalizar\n            </button>\n        </div>\n    )\n\n    // handle end button click\n    function onClickEndButton() {\n        props.setChatting(false)\n    }\n\n}","import { useEffect, useState } from \"react\";\n\nimport Chatbot from 'react-chatbot-kit'\nimport 'react-chatbot-kit/build/main.css'\nimport { createChatBotMessage } from \"react-chatbot-kit\";\n\nimport ActionProvider from \"./config/ActionProviders\";\nimport MessageParser from \"./config/MessageParser\";\nimport inputValidator from \"./config/validator\";\nimport StartTestWidget from \"./widgets/StartTestWidget\";\nimport EndTestWidget from \"./widgets/EndTestWidget\";\nimport './ChatTestComponent.css'\n\nexport default function ChatTestComponent(props) {\n\n    // State of the component\n    let [chatbotConfig, setChatbotConfig]      = useState();\n    let [chatting,setChatting]                 = useState(true);\n    let [chatbotIsLoading,setChatbotIsLoading] = useState(true);\n    let [userAnswers,setUserAnswers]           = useState([]);\n\n    // Effect Hooks\n    useEffect(initialChatbotConfig,[]) // Start the chatbot config after initial load of the component\n\n    useEffect(()=>{  // Logic to implement if the test is finished (chatting=false)\n        if (!chatting){\n            // send the text of the conversation with the chatbot to the Test parent component\n            props.setResults( prevState => {\n                return {\n                    ...prevState,\n                    chatBotAnswers:[...userAnswers]\n                }\n            })\n        }\n    },[chatting])\n\n    // rendering of the component\n    return (\n        <section className=\"containerDiv\">\n            <div className=\"chatBotContainerDiv\">\n                {\n                    ( !chatbotIsLoading && chatting) ? \n                    <Chatbot\n                        placeholderText='. . . . .'\n                        headerText='acceXible chatbot'\n                        config={chatbotConfig}\n                        messageParser={MessageParser}\n                        actionProvider={ActionProvider}\n                        validator={inputValidator}\n                        setUserAnswers={setUserAnswers}\n                        setChatting={setChatting}\n                    /> :\n                    <p className=\"chatText\">Cargando ChatBot</p> //Buen sitio para poner un loader\n                }\n            </div>\n        </section>\n    )\n\n    // UTILITY / FUNCTIONALITY FUNCTIONS\n\n    // fetch the API for chatbot messages and use them for the\n    //  initial configuration of the chatbot.\n    function initialChatbotConfig() {\n        fetch('/api/chatbot-messages')\n            .then(response=>{\n                if (response.ok) return response.json()\n                throw response;\n            })\n            .then(response=>{\n                // Configuration object of the chatbot\n                let config = {\n                    widgets:[\n                        {\n                            widgetName: 'start-test',\n                            widgetFunc: (props) => <StartTestWidget {...props} />,\n                            mapStateToProps: ['disableChatInput'],\n                        },\n                        {\n                            widgetName: 'end-test',\n                            widgetFunc: (props) => <EndTestWidget {...props} />,\n                            props: {setChatting:setChatting}\n                        },\n                    ]\n                };\n                // Initial messages\n                config.initialMessages = response\n                    .filter(\n                        item=>item.type==='greeting'\n                    )\n                    .map(\n                        item=>createChatBotMessage( item.text, {widget:'start-test'} )\n                    )\n                // State of the chatbot\n                let state = {\n                    timeStamp : Date.now(),\n                    questionIndex:0,\n                    disableChatInput:true\n                }\n                state.questionsArray = response\n                    .filter(\n                        item=>item.type==='question'\n                    )\n                    .map(\n                        item=>item.text \n                    )\n                config.state = state;\n                // Update the component state\n                setChatbotConfig({...config});\n                setChatbotIsLoading(false);\n            })\n            .catch(err=>{\n                alert(`ERROR: code ${err.status}  (${err.statusText})`);\n                console.log(err);\n            })\n    }\n}","import './QuestionsComponent.css';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\n\n\nfunction QuestionsComponent(props) {\n    const [questions, setQuestion] = useState([]);\n    const [allSelectedAnswers, setAllSelectedAnswers] = useState([{}]); // variable que contendra todas las respuestas seleccionadas\n    const [selectedAnswer, setSelectedAnswer] = useState(); // variable que se usara para actualizarla cuando pulsemos en un button de respuesta, ira cambiando\n    const [questionIndex, setQuestionIndex] = useState(0); // variable que se usara para actualizar el indice del array que contiene las preguntas\n    let [okButtonIsActive,setOkButtonIsActive] = useState(false);\n    let [optionIsSelectedArray,setOptionIsSelectedArray] = useState([false,false,false,false]);\n\n    useEffect(() => {\n        async function fetchData() {\n            let listaQuestions = await getQuestions();\n            setQuestion(listaQuestions);\n        }\n        fetchData();\n    }, [])\n\n    return (\n        <>\n            <div className=\"quiz-body\">\n            {\n            questions.length > 0 && questionIndex < questions.length &&// comprobamos si questions tiene elementos dentro y si la variable questionIndex es menor que la longitud del array de questions\n                <div className=\"quiz-modal\">\n                    <div className=\"quiz-modal-header\">\n                        <label className=\"quiz-modal-title\">{questions[questionIndex].question} </label>\n                    </div>\n                    <br />\n                    {\n                    questions[questionIndex].answers.map(function (answerIndividual,index) {\n                        return (\n                            <>\n                                <button className={optionIsSelectedArray[index] ? \"selected\" : \"quiz-modal-option\"} onClick={() => selectAnswer(answerIndividual.text, answerIndividual.score,index)}>{answerIndividual.text} </button>\n                                <br />\n                            </>\n                            )\n                        })\n                    }\n                    <br />\n                    <div className=\"quiz-modal-footer\">\n                        <div className=\"quiz-modal-progress-controls\">\n                            <p className=\"quiz-modal-progress-current\">{`${questionIndex <= questions.length - 1 ? questionIndex + 1 : \"\"} / ${questions.length}`}</p>\n                            <button className={\"quiz-modal-btn\" + (okButtonIsActive ? \"\" : \" quiz-modal-btn-disabled\")} onClick={ okButtonIsActive ? () => nextQuestion() : null}> Síguiente </button>\n                        </div>\n                    </div>\n                </div>\n            }\n            </div>\n        </>\n    );\n    function selectAnswer(answer, score,index) {\n        let previouslySelectedIndex = optionIsSelectedArray.findIndex(item=>item);\n        if (previouslySelectedIndex >= 0) optionIsSelectedArray[previouslySelectedIndex] = false;\n        optionIsSelectedArray[index] = true;\n        setOptionIsSelectedArray([...optionIsSelectedArray]);\n        setOkButtonIsActive(true);\n        setSelectedAnswer({ answerInicial: answer, scoreInicial: score }) //meter variable cual de las respuestas es selecionada.\n    }\n\n    function nextQuestion() {\n        props.setResults( prevState => {\n            return {\n                ...prevState,\n                testScore:prevState.testScore + selectedAnswer.scoreInicial\n            }\n        })\n        if (questionIndex === questions.length - 1){\n            props.setActualPart(\"chat\");\n        }\n        setOkButtonIsActive(false);\n        setOptionIsSelectedArray([false,false,false,false])\n        setQuestionIndex(questionIndex + 1);\n        // setAllSelectedAnswers(allSelectedAnswers.push(selectedAnswer))\n        // setSelectedAnswer();\n        // console.log(allSelectedAnswers);\n    }\n\n    function getQuestions() {\n        let response = fetch(`/api/test-questions`)\n            .then(responseFetch => responseFetch.json())\n            .then(respuestaJSON => respuestaJSON)\n        return response;\n    }\n}\nexport default QuestionsComponent;","import './FormularioEnviarComponent.css';\nimport { useState } from 'react';\n\nfunction FormularioEnviarComponent(props) {\n\n    const [firstName, setFirstName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n\n\n    function cambiarFirstName(event) {\n        setFirstName(event.target.value)\n    }\n\n    function cambiarEmail(event) {\n        setEmail(event.target.value)\n    }\n\n\n\n    return (\n        <>\n        <section className=\"formSection\">\n            <div className=\"formContainer\">\n            <h2>Recibe tus Resultados Por Email</h2>\n                <div className=\"loginForm\">\n                    <input className=\"loginInput\" type=\"email\" placeholder='Email' onChange={cambiarEmail} />\n                    <br />\n                </div>\n                <div className=\"loginForm\">\n                    <input className=\"loginInput\" type=\"text\" placeholder='Nombre' onChange={cambiarFirstName} />\n                </div>\n                <div className=\"loginForm\">\n                    <button className=\"loginButton\" onClick={() => EnviarEmail()} >Enviar</button>\n                </div>\n            </div>\n        </section>\n        </>\n    )\n\n    function EnviarEmail() {\n        fetch(`/api/results`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                testScore: props.results.testScore,\n                chatBotAnswers: props.results.chatBotAnswers,\n                firstName: firstName,\n                email: email\n            })\n        })\n            .then(response => {\n                if (!response.ok) throw response\n                props.setActualPart(\"confirm-results-send\");\n            })\n    }\n\n\n\n}\n\nexport default FormularioEnviarComponent;\n","import './EmailConfirmation.css';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\nfunction EmailConfirmation(props) {\n\n    return (\n        <>\n        <div className=\"emailConfirmationSection\">\n            <div className=\"emailConfirmationContainer\">\n                <div className=\"emailContainer\">\n                    <p>El test ha sido realizado con éxito. <br/>Los resultados han sido enviados a su email.<br/> Pulse OK para continuar:</p>\n                    <Link to='/'>\n                        <button className=\"buttonConfirmation\">\n                            OK\n                        </button>\n                    </Link>\n                </div>\n            </div>\n        </div>\n        </>\n    )\n\n\n}\nexport default EmailConfirmation","import ChatTestComponent from \"../../Components/ChatTest/ChatTestComponent\";\nimport QuestionsComponent from \"../../Components/Questions/QuestionsComponent\";\nimport FormularioEnviarComponent from \"../../Components/FormularioEnviar/FormularioEnviarComponent\";\nimport EmailConfirmation from \"../../Components/EmailConfirmation/EmailConfirmation\";\n\nimport { useState, useEffect } from \"react\";\n\nexport default function Test(props) {\n\n    // Store the results of the test and chatbot in a state variable\n    let [results,setResults] = useState({\n        testScore : 0,\n        chatBotAnswers: [],\n    });\n    // State variable that controls what is going to be rendered\n    let [actualPart,setActualPart] = useState('test');\n    // State variable that controls if the test is still going on\n    let [testFinished,setTestFinished] = useState(false);\n\n    // Effects\n    \n    // Changes in the results\n    useEffect(()=>{\n        if (results.chatBotAnswers.length > 0 && results.testScore > 0) {\n            setTestFinished(true);\n        }\n    },[results])\n\n    // Change in the status of the test\n    useEffect(()=>{\n        if (testFinished) {\n            // If the user is logged send the results directly\n            if ( localStorage.getItem('token') !=null ) {\n                sendResultsLoggedUser();\n            } else { // If the user is not logged send to the send email form\n                setActualPart('send-results')\n            }\n        }\n    },[testFinished])\n    \n    \n    // Object in which the keys are the names of the components to be rendered. The values are functions\n    // which render the corresponding components and give them the props they need for work.\n    let parts = {\n        'test': () => <QuestionsComponent setActualPart={setActualPart} setResults={setResults} />,\n        'chat': () => <ChatTestComponent  setActualPart={setActualPart} setResults={setResults} />,\n        'send-results': () => <FormularioEnviarComponent setActualPart={setActualPart} results={results} />,\n        'confirm-results-send':()=> <EmailConfirmation />,\n    }\n\n    // Variable that controls if the user is logged or not\n    let token = localStorage.getItem('token');\n\n    // Render everything\n    return(\n        <>\n            {parts[actualPart]()}\n        </>\n    )\n\n\n    // Functions\n\n    // Function to send the results to the API if the user is logged\n    function sendResultsLoggedUser() {\n        fetch(`/api/results`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n            },\n            body: JSON.stringify({\n                testScore: results.testScore,\n                chatBotAnswers: results.chatBotAnswers,\n            }),\n        }).then(response => {\n            if ( !response.ok ) throw response // response has an error status\n            setActualPart(\"confirm-results-send\"); // Move to the next part of the test\n        }).catch( response => {\n            response.json().then(console.log);\n        })\n    }\n}\n","import \"./CalendarResultModal.css\"\n\nexport default function CalendarResultModal({event:{start,extendedProps}}) {\n    let [date,time] = start.toLocaleString('es-ES').split(' ');\n    return (\n      <div className=\"results\">\n        <h3>{`Resultados del ${date} a las ${time}`}</h3>\n        <br />\n        <div className=\"resultsInCalendarModal\">\n          <p>Puntuación del test: {extendedProps.testScore}</p>\n          <p>Puntuación del chat: {extendedProps.chatScore}</p>\n          <p>Puntuación total: {extendedProps.totalScore}</p>\n        </div>\n      </div>\n    );\n}","import ReactDOM from \"react-dom\";\nimport \"./PersonalPage.css\"\nimport { useEffect, useState, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport FullCalendar from \"@fullcalendar/react\"; // must go before plugins\nimport dayGridPlugin from \"@fullcalendar/daygrid\"; // a plugin!\n\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nimport swal from \"sweetalert\";\n\nimport CalendarResultModal from \"../../Components/CalendarResultModal/CalendarResultModal\";\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nconst resultsColors = [\n  { id: 0, threshold: 5, color: \"#9999FF\" },\n  { id: 1, threshold: 10, color: \"#5555FF\" },\n  { id: 2, threshold: 15, color: \"#0000FF\" },\n];\n\nexport default function PersonalPage(props) {\n  // State hooks\n  let [userToken] = useState(localStorage.getItem(\"token\"));\n  let [user, setUser] = useState(undefined);\n  let [userTestsResults, setUserTestsresults] = useState(undefined);\n\n  // Navigation hook\n  let navigate = useNavigate();\n\n  // Reference Hooks\n  const calendarRef = useRef(null);\n\n  // Effect hooks\n  useEffect(() => {\n    // navigate to home if the user is not logged in\n    if (userToken == null) return navigate(\"/\");\n    // If the user is logged fetch its data from the backend\n    fetchUser();\n    fetchUserTests();\n  }, []);\n\n  useEffect(() => {\n    if (userTestsResults != undefined) {\n      const calendarAPI = calendarRef.current.getApi();\n      dataForDonutChart();\n    }\n  }, [userTestsResults]);\n\n  return (\n    <>\n      {userTestsResults != undefined ? (\n        <>\n        <section className=\"containerGlobal\">\n          <section className=\"containerCalendar\">\n            <div class=\"calendar\">\n              <FullCalendar\n                initialView=\"dayGridMonth\"\n                plugins={[dayGridPlugin]}\n                ref={calendarRef}\n                events={mapUserResultsToCalendarEvents()}\n                displayEventTime={true}\n                eventDisplay=\"block\"\n                eventTimeFormat={{\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                  hour12: false,\n                }}\n                eventClick={calendarEventClick}\n              />\n              </div>\n            </section>\n            <section className=\"containerDonut\">\n              <div className=\"donut\">\n                <Doughnut data={dataForDonutChart()} />\n              </div>\n            </section>\n          </section>\n        </>\n      ) : null}\n    </>\n  );\n\n  // Functions\n  function mapUserResultsToCalendarEvents() {\n    return userTestsResults.map(\n      ({ dateTime, testScore, chatScore, totalScore }) => ({\n        title: \"\",\n        start: dateTime,\n        testScore,\n        chatScore,\n        totalScore,\n        color: resultsColors.find(({ threshold }) => totalScore <= threshold)\n          .color,\n      })\n    );\n  }\n\n  function calendarEventClick(eventClickInfo) {\n    // custom component inside a swalert modal\n    let wrapper = document.createElement(\"div\");\n    ReactDOM.render(\n      <CalendarResultModal event={eventClickInfo.event} />,\n      wrapper\n    );\n    let el = wrapper.firstChild;\n    swal({\n      content: el,\n    });\n    // alert(eventClickInfo.event.extendedProps.totalScore);\n  }\n\n  // Obtain user info from the backend\n  function fetchUser() {\n    fetch(\"/api/users\", {\n      headers: {\n        Authorization: `Bearer ${userToken}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) throw response;\n        return response.json();\n      })\n      .then((data) => {\n        setUser(data);\n      });\n  }\n\n  // Obtain user historic of tests from the backend\n  function fetchUserTests() {\n    fetch(\"/api/results\", {\n      headers: {\n        Authorization: `Bearer ${userToken}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) throw response;\n        return response.json();\n      })\n      .then((data) => {\n        setUserTestsresults(data);\n      });\n  }\n\n  function dataForDonutChart() {\n    let rangeCounts = [0, 0, 0];\n\n    userTestsResults.forEach(({ totalScore }) => {\n      let index = resultsColors.findIndex(\n        ({ threshold }) => totalScore <= threshold\n      );\n      if (index >= 0) rangeCounts[index] += 1;\n    });\n    let data = {\n      labels: [\n        \"Sin signos de depresión\",\n        \"Signos depresivos leves\",\n        \"Signos depresivos severos\",\n      ],\n      datasets: [\n        {\n          label: \"Nivel de ansiedad/depresión\",\n          data: rangeCounts,\n          backgroundColor: resultsColors.map(({ color }) => color),\n          borderWidth: 1,\n        },\n      ],\n    };\n    return data;\n  }\n}\n","import React from \"react\";\nimport \"./App.css\"\nimport {\n    BrowserRouter as Router,\n    Routes,\n    Route\n} from \"react-router-dom\";\n\n// Components\nimport NavBar from \"../Components/NavBar/NavBar\";\n\n// Pages\nimport Home from \"../Pages/Home/Home\";\nimport Login from  \"../Pages/Login/Login\";\nimport Signup from \"../Pages/Signup/Signup\";\nimport Test from '../Pages/Test/Test'\nimport PersonalPage from \"../Pages/PersonalPage/PersonalPage\";\n\nfunction App() {\n  return (\n    <div>\n    <Router>\n      <NavBar />\n      <main>\n    {/* <NavBarComponent /> */}\n        <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/test-ansiedad\" element={<Test />} />\n            <Route path=\"/login\" element={ <Login /> } />\n            <Route path=\"/signup\" element={<Signup />} /> \n            <Route path=\"/dashboard\" element={ <PersonalPage  /> } />\n        </Routes>\n      </main>\n    </Router>\n</div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}